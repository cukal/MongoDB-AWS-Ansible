---
# Create security group
- name: Create security groups for Mongo
  ec2_group:
    name: "mongo-access-{{ deployment.region }}"
    description: "Security group to control mongo access"
    aws_access_key: "{{ access_key_id }}"
    aws_secret_key: "{{ secret_access_key }}"
    region: "{{ deployment.region }}"
    vpc_id: "{{ mongo_vpc.vpc_id }}"
    rules:
      - proto: tcp
        from_port: 27017
        to_port: 27019
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 28017
        to_port: 28017
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: mongo_security

######################
# MongoDB leader
######################
- name: Create the single mongoDB leader node
  ec2:
    aws_access_key: "{{ access_key_id }}"
    aws_secret_key: "{{ secret_access_key }}"
    instance_type: "{{ deployment.mongodb.instance_type }}"
    image: "{{ deployment.mongodb.ami_id }}"
    wait: yes
    region: "{{ target_region }}"
    assign_public_ip: yes
    vpc_subnet_id: "{{ mongo_leader_subnet.subnet.id }}"
    group_id:
      - "{{ mongo_security.group_id }}"
    instance_tags:
      Application: "{{ application }}"
      Name: "MongoDBLeader"
      Environment: "{{ deployment.environment }}"
      Deployment-Group: "{{ deployment.group }}"
      Type: MongoDBLeader
    exact_count: 1
    count_tag:
      Type: MongoDBLeader
      Deployment-Group: "{{ deployment.group }}"
      Environment: "{{ deployment.environment }}"
    zone: "{{ deployment.mongodb.leader.zone }}"
    key_name: "{{ ssh_key_name }}"
  register: mongo_leader_box

# Wait for SSH to come up
- name: Check for SSH on the leader box
  wait_for:
    host: "{{ mongo_leader_box.tagged_instances.0.public_dns_name }}"
    port: 22
    timeout: 320
    state: started
    search_regex: OpenSSH
    delay: 10

# Add hosts to the list for processing.
- name: Add the leader box to host inventory
  add_host:
    hostname: "{{ mongo_leader_box.tagged_instances.0.public_dns_name }}"
    groups: mongo_leader
    private_ip: "{{ mongo_leader_box.tagged_instances.0.private_ip }}"
    ansible_user: "{{ ec2_ssh_user }}"
    ansible_ssh_private_key_file: "{{ ssh_key_path }}"

######################
# MongoDB minions
######################

# Create the database stack
- name: Create minion nodes
  ec2:
    aws_access_key: "{{ access_key_id }}"
    aws_secret_key: "{{ secret_access_key }}"
    instance_type: "{{ deployment.mongodb.instance_type }}"
    image: "{{ deployment.mongodb.ami_id }}"
    wait: yes
    region: "{{ target_region }}"
    assign_public_ip: yes
    vpc_subnet_id: "{{ item.1.subnet_id }}"
    group_id:
      - "{{ mongo_security.group_id }}"
    instance_tags:
      Application: "{{ application }}"
      Name: "MongoDBTier"
      Environment: "{{ deployment.environment }}"
      Deployment-Group: "{{ deployment.group }}"
      Type: MongoDBMinion
    exact_count: "{{ item.0.ensure_count }}"
    count_tag:
      Type: MongoDBMinion
      Deployment-Group: "{{ deployment.group }}"
      Environment: "{{ deployment.environment }}"
    zone: "{{ item.0.zone }}"
    key_name: "{{ ssh_key_name }}"
  register: mongo_boxes
  with_nested:
    - "{{ deployment.mongodb.azs }}"
    - "{{ mongo_subnets_to_azs }}"
  when: item.0.zone == item.1.zone

# Wait for SSH to come up
- name: Wait for SSH to come up on the minion boxes
  wait_for:
    host: "{{ item.1.public_dns_name }}"
    port: 22
    timeout: 320
    state: started
    search_regex: OpenSSH
    delay: 10
  with_subelements:
    - "{{ mongo_boxes.results }}"
    - tagged_instances

# Add hosts to the list for processing.
- name: Add the minion boxes to host inventory
  add_host:
    hostname: "{{ item.1.public_dns_name }}"
    groups: mongo
    private_ip: "{{ item.1.private_ip }}"
    ansible_user: "{{ ec2_ssh_user }}"
    ansible_ssh_private_key_file: "{{ ssh_key_path }}"
  with_subelements:
    - "{{ mongo_boxes.results }}"
    - tagged_instances
